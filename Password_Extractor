from burp import IBurpExtender
from burp import IHttpListener
from burp import IScanIssue
from java.net import URL
import re

class BurpExtender(IBurpExtender, IHttpListener):
    def registerExtenderCallbacks(self, callbacks):
        self._callbacks = callbacks
        self._helpers = callbacks.getHelpers()
        callbacks.setExtensionName("Password Extractor")
        callbacks.registerHttpListener(self)
        self._reported_issues = set()

    def processHttpMessage(self, toolFlag, messageIsRequest, messageInfo):
        if not messageIsRequest:
            response = messageInfo.getResponse()
            analyzed_response = self._helpers.analyzeResponse(response)

            # Regular expression to match passwords
            password_pattern = re.compile(r'(?i)(password|pass|passwd)[:=]\s*"?([^\s"]+)"?')
            matches = re.findall(password_pattern, self._helpers.bytesToString(response))

            if matches:
                issue_url = str(messageInfo.getUrl())
                
                # Check for duplicate issues
                if issue_url in self._reported_issues:
                    return
                
                self._reported_issues.add(issue_url)

                issue = CustomScanIssue(messageInfo.getHttpService(),
                                        self._helpers.analyzeRequest(messageInfo).getUrl(),
                                        [messageInfo],
                                        "Password Disclosure",
                                        "The response contains the following password(s): %s" % (', '.join([m[1] for m in matches])),
                                        "High")
                self._callbacks.addScanIssue(issue)

class CustomScanIssue(IScanIssue):
    def __init__(self, httpService, url, httpMessages, name, detail, severity):
        self._httpService = httpService
        self._url = url
        self._httpMessages = httpMessages
        self._name = name
        self._detail = detail
        self._severity = severity

    def getUrl(self):
        return self._url

    def getIssueName(self):
        return self._name

    def getIssueType(self):
        return 0

    def getSeverity(self):
        return self._severity

    def getConfidence(self):
        return "Certain"

    def getIssueBackground(self):
        return None

    def getRemediationBackground(self):
        return None

    def getIssueDetail(self):
        return self._detail

    def getRemediationDetail(self):
        return None

    def getHttpMessages(self):
        return self._httpMessages

    def getHttpService(self):
        return self._httpService
